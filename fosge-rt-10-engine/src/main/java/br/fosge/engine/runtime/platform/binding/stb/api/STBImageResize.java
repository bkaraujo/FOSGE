package br.fosge.engine.runtime.platform.binding.stb.api;

import org.lwjgl.stb.*;

import java.nio.ByteBuffer;
import java.nio.FloatBuffer;

public interface STBImageResize {

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_1CHANNEL = 1;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_2CHANNEL = 2;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_RGB = 3;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_BGR = 0;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_4CHANNEL = 5;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_RGBA = 4;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_BGRA = 6;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_ARGB = 7;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_ABGR = 8;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_RA = 9;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_AR = 10;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_RGBA_PM = 11;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_BGRA_PM = 12;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_ARGB_PM = 13;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_ABGR_PM = 14;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_RA_PM = 15;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_AR_PM = 16;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_RGBA_NO_AW = 11;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_BGRA_NO_AW = 12;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_ARGB_NO_AW = 13;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_ABGR_NO_AW = 14;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_RA_NO_AW = 15;

    /** {@code stbir_pixel_layout} specifies:  <ul> <li>number of channels</li> <li>order of channels</li> <li>whether color is premultiplied by alpha</li> </ul>  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_1CHANNEL 1CHANNEL}</li> <li>{@link #STBIR_2CHANNEL 2CHANNEL}</li> <li>{@link #STBIR_RGB RGB}</li> <li>{@link #STBIR_BGR BGR}</li> <li>{@link #STBIR_4CHANNEL 4CHANNEL}</li> <li>{@link #STBIR_RGBA RGBA}</li> <li>{@link #STBIR_BGRA BGRA}</li> <li>{@link #STBIR_ARGB ARGB}</li> <li>{@link #STBIR_ABGR ABGR}</li> <li>{@link #STBIR_RA RA}</li> <li>{@link #STBIR_AR AR}</li> <li>{@link #STBIR_RGBA_PM RGBA_PM}</li> <li>{@link #STBIR_BGRA_PM BGRA_PM}</li> <li>{@link #STBIR_ARGB_PM ARGB_PM}</li> <li>{@link #STBIR_ABGR_PM ABGR_PM}</li> <li>{@link #STBIR_RA_PM RA_PM}</li> <li>{@link #STBIR_AR_PM AR_PM}</li> <li>{@link #STBIR_RGBA_NO_AW RGBA_NO_AW}</li> <li>{@link #STBIR_BGRA_NO_AW BGRA_NO_AW}</li> <li>{@link #STBIR_ARGB_NO_AW ARGB_NO_AW}</li> <li>{@link #STBIR_ABGR_NO_AW ABGR_NO_AW}</li> <li>{@link #STBIR_RA_NO_AW RA_NO_AW}</li> <li>{@link #STBIR_AR_NO_AW AR_NO_AW}</li> </ul>*/
    int STBIR_AR_NO_AW = 16;

    /** {@code stbir_edge}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_EDGE_CLAMP EDGE_CLAMP}</li> <li>{@link #STBIR_EDGE_REFLECT EDGE_REFLECT}</li> <li>{@link #STBIR_EDGE_WRAP EDGE_WRAP} - This edge mode is slower and uses more memory.</li> <li>{@link #STBIR_EDGE_ZERO EDGE_ZERO}</li> </ul>*/
    int STBIR_EDGE_CLAMP = 0;

    /** {@code stbir_edge}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_EDGE_CLAMP EDGE_CLAMP}</li> <li>{@link #STBIR_EDGE_REFLECT EDGE_REFLECT}</li> <li>{@link #STBIR_EDGE_WRAP EDGE_WRAP} - This edge mode is slower and uses more memory.</li> <li>{@link #STBIR_EDGE_ZERO EDGE_ZERO}</li> </ul>*/
    int STBIR_EDGE_REFLECT = 1;

    /** {@code stbir_edge}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_EDGE_CLAMP EDGE_CLAMP}</li> <li>{@link #STBIR_EDGE_REFLECT EDGE_REFLECT}</li> <li>{@link #STBIR_EDGE_WRAP EDGE_WRAP} - This edge mode is slower and uses more memory.</li> <li>{@link #STBIR_EDGE_ZERO EDGE_ZERO}</li> </ul>*/
    int STBIR_EDGE_WRAP = 2;

    /** {@code stbir_edge}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_EDGE_CLAMP EDGE_CLAMP}</li> <li>{@link #STBIR_EDGE_REFLECT EDGE_REFLECT}</li> <li>{@link #STBIR_EDGE_WRAP EDGE_WRAP} - This edge mode is slower and uses more memory.</li> <li>{@link #STBIR_EDGE_ZERO EDGE_ZERO}</li> </ul>*/
    int STBIR_EDGE_ZERO = 3;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_DEFAULT = 0;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_BOX = 1;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_TRIANGLE = 2;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_CUBICBSPLINE = 3;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_CATMULLROM = 4;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_MITCHELL = 5;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_POINT_SAMPLE = 6;

    /** {@code stbir_filter}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_FILTER_DEFAULT FILTER_DEFAULT} - Use same filter type that easy-to-use API chooses.</li> <li>{@link #STBIR_FILTER_BOX FILTER_BOX} - A trapezoid w/1-pixel wide ramps, same result as box for integer scale ratios.</li> <li>{@link #STBIR_FILTER_TRIANGLE FILTER_TRIANGLE} - On upsampling, produces same results as bilinear texture filtering.</li> <li>{@link #STBIR_FILTER_CUBICBSPLINE FILTER_CUBICBSPLINE} - The cubic b-spline (aka Mitchell-Netrevalli with {@code B=1,C=0}), gaussian-esque.</li> <li>{@link #STBIR_FILTER_CATMULLROM FILTER_CATMULLROM} - An interpolating cubic spline.</li> <li>{@link #STBIR_FILTER_MITCHELL FILTER_MITCHELL} - Mitchell-Netrevalli filter with {@code B=1/3,C=1/3}.</li> <li>{@link #STBIR_FILTER_POINT_SAMPLE FILTER_POINT_SAMPLE} - Simple point sampling.</li> <li>{@link #STBIR_FILTER_OTHER FILTER_OTHER} - User callback specified.</li> </ul>*/
    int STBIR_FILTER_OTHER = 7;

    /** {@code stbir_datatype}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_TYPE_UINT8 TYPE_UINT8}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB TYPE_UINT8_SRGB}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB_ALPHA TYPE_UINT8_SRGB_ALPHA} - Alpha channel, when present, should also be SRGB (this is very unusual).</li> <li>{@link #STBIR_TYPE_UINT16 TYPE_UINT16}</li> <li>{@link #STBIR_TYPE_FLOAT TYPE_FLOAT}</li> <li>{@link #STBIR_TYPE_HALF_FLOAT TYPE_HALF_FLOAT}</li> </ul>*/
    int STBIR_TYPE_UINT8 = 0;

    /** {@code stbir_datatype}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_TYPE_UINT8 TYPE_UINT8}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB TYPE_UINT8_SRGB}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB_ALPHA TYPE_UINT8_SRGB_ALPHA} - Alpha channel, when present, should also be SRGB (this is very unusual).</li> <li>{@link #STBIR_TYPE_UINT16 TYPE_UINT16}</li> <li>{@link #STBIR_TYPE_FLOAT TYPE_FLOAT}</li> <li>{@link #STBIR_TYPE_HALF_FLOAT TYPE_HALF_FLOAT}</li> </ul>*/
    int STBIR_TYPE_UINT8_SRGB = 1;

    /** {@code stbir_datatype}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_TYPE_UINT8 TYPE_UINT8}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB TYPE_UINT8_SRGB}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB_ALPHA TYPE_UINT8_SRGB_ALPHA} - Alpha channel, when present, should also be SRGB (this is very unusual).</li> <li>{@link #STBIR_TYPE_UINT16 TYPE_UINT16}</li> <li>{@link #STBIR_TYPE_FLOAT TYPE_FLOAT}</li> <li>{@link #STBIR_TYPE_HALF_FLOAT TYPE_HALF_FLOAT}</li> </ul>*/
    int STBIR_TYPE_UINT8_SRGB_ALPHA = 2;

    /** {@code stbir_datatype}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_TYPE_UINT8 TYPE_UINT8}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB TYPE_UINT8_SRGB}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB_ALPHA TYPE_UINT8_SRGB_ALPHA} - Alpha channel, when present, should also be SRGB (this is very unusual).</li> <li>{@link #STBIR_TYPE_UINT16 TYPE_UINT16}</li> <li>{@link #STBIR_TYPE_FLOAT TYPE_FLOAT}</li> <li>{@link #STBIR_TYPE_HALF_FLOAT TYPE_HALF_FLOAT}</li> </ul>*/
    int STBIR_TYPE_UINT16 = 3;

    /** {@code stbir_datatype}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_TYPE_UINT8 TYPE_UINT8}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB TYPE_UINT8_SRGB}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB_ALPHA TYPE_UINT8_SRGB_ALPHA} - Alpha channel, when present, should also be SRGB (this is very unusual).</li> <li>{@link #STBIR_TYPE_UINT16 TYPE_UINT16}</li> <li>{@link #STBIR_TYPE_FLOAT TYPE_FLOAT}</li> <li>{@link #STBIR_TYPE_HALF_FLOAT TYPE_HALF_FLOAT}</li> </ul>*/
    int STBIR_TYPE_FLOAT = 4;

    /** {@code stbir_datatype}  <h5>Enum values:</h5>  <ul> <li>{@link #STBIR_TYPE_UINT8 TYPE_UINT8}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB TYPE_UINT8_SRGB}</li> <li>{@link #STBIR_TYPE_UINT8_SRGB_ALPHA TYPE_UINT8_SRGB_ALPHA} - Alpha channel, when present, should also be SRGB (this is very unusual).</li> <li>{@link #STBIR_TYPE_UINT16 TYPE_UINT16}</li> <li>{@link #STBIR_TYPE_FLOAT TYPE_FLOAT}</li> <li>{@link #STBIR_TYPE_HALF_FLOAT TYPE_HALF_FLOAT}</li> </ul>*/
    int STBIR_TYPE_HALF_FLOAT = 5;

    ByteBuffer stbir_resize_uint8_srgb(ByteBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, ByteBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_type);

    ByteBuffer stbir_resize_uint8_srgb(ByteBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, ByteBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_type, long length);

    ByteBuffer stbir_resize_uint8_linear(ByteBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, ByteBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_type);

    ByteBuffer stbir_resize_uint8_linear(ByteBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, ByteBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_type, long length);

    FloatBuffer stbir_resize_float_linear(FloatBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, FloatBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_type);

    FloatBuffer stbir_resize_float_linear(FloatBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, FloatBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_type, long length);

    ByteBuffer stbir_resize(ByteBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, ByteBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_layout, int data_type, int edge, int filter);

    ByteBuffer stbir_resize(ByteBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, ByteBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_layout, int data_type, int edge, int filter, long length);

    void stbir_resize_init(STBIR_RESIZE resize, ByteBuffer input_pixels, int input_w, int input_h, int input_stride_in_bytes, ByteBuffer output_pixels, int output_w, int output_h, int output_stride_in_bytes, int pixel_layout, int data_type);

    void stbir_set_datatypes(STBIR_RESIZE resize, int input_type, int output_type);

    void stbir_set_pixel_callbacks(STBIR_RESIZE resize, STBIRInputCallbackI input_cb, STBIROutputCallbackI output_cb);

    void stbir_set_user_data(STBIR_RESIZE resize, long user_data);

    void stbir_set_buffer_ptrs(STBIR_RESIZE resize, ByteBuffer input_pixels, int input_stride_in_bytes, ByteBuffer output_pixels, int output_stride_in_bytes);

    /** Sets new buffer layouts.*/
    int stbir_set_pixel_layouts(STBIR_RESIZE resize, int input_pixel_layout, int output_pixel_layout);

    int stbir_set_edgemodes(STBIR_RESIZE resize, int horizontal_edge, int vertical_edge);

    int stbir_set_filters(STBIR_RESIZE resize, int horizontal_filter, int vertical_filter);

    int stbir_set_filter_callbacks(STBIR_RESIZE resize, STBIRKernelCallbackI horizontal_filter, STBIRSupportCallbackI horizontal_support, STBIRKernelCallbackI vertical_filter, STBIRSupportCallbackI vertical_support);

    /** Sets input sub-region (full region by default).*/
    int stbir_set_pixel_subrect(STBIR_RESIZE resize, int subx, int suby, int subw, int subh);

    int stbir_set_input_subrect(STBIR_RESIZE resize, double s0, double t0, double s1, double t1);

    /** Sets output sub-region (full region by default).*/
    int stbir_set_output_pixel_subrect(STBIR_RESIZE resize, int subx, int suby, int subw, int subh);

    /** When inputting AND outputting non-premultiplied alpha pixels, we use a slower but higher quality technique that fills the zero alpha pixel's RGB values with something plausible. If you don't care about areas of zero alpha, you can call this function to get about a 25% speed improvement for {@link #STBIR_RGBA RGBA} to {@code STBIR_RGBA} types of resizes.*/
    int stbir_set_non_pm_alpha_speed_over_quality(STBIR_RESIZE resize, boolean non_pma_alpha_speed_over_quality);

    /** Builds the samplers and does one allocation.*/
    int stbir_build_samplers(STBIR_RESIZE resize);

    /** You MUST call this, if you call {@link #stbir_build_samplers build_samplers} or {@link #stbir_build_samplers_with_splits build_samplers_with_splits}.*/
    void stbir_free_samplers(STBIR_RESIZE resize);

    /** The main function to perform the resize synchronously on one thread.*/
    int stbir_resize_extended(STBIR_RESIZE resize);

    /** Build samplers for threading.  <p>You can pass in the number of threads you'd like to use ({@code try_splits}). It returns the number of splits (threads) that you can call it with. It might be less if the image resize can't be split up that many ways.</p>*/
    int stbir_build_samplers_with_splits(STBIR_RESIZE resize, int try_splits);

    /** This function does a split of the resizing (you call this fuction for each split, on multiple threads). A split is a piece of the output resize pixel space.  <p>Note that you MUST call {@link #stbir_build_samplers_with_splits build_samplers_with_splits} before {@code stbir_resize_extended_split}!</p>  <p>Usually, you will always call {@code stbir_resize_extended_split} with {@code split_start} as the {@code thread_index} and "1" for the {@code split_count}. But, if you have a weird situation where you MIGHT want 8 threads, but sometimes only 4 threads, you can use 0,2,4,6 for the {@code split_start}'s and use "2" for the {@code split_count} each time to turn in into a 4 thread resize. (This is unusual).</p>*/
    int stbir_resize_extended_split(STBIR_RESIZE resize, int split_start, int split_count);

}
